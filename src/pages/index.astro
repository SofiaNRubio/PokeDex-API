---
import PokemonCard from '../components/PokemonCard.astro';
import '../styles/global.css'; 

export const prerender = false; 
const POKEMON_PER_PAGE = 10; 
let initialPokemonData = []; 

async function getAllPokemonNamesAndUrls() {
  const response = await fetch('https://pokeapi.co/api/v2/pokemon?limit=10000');

  const data = await response.json();
  return data.results;
}

initialPokemonData = await getAllPokemonNamesAndUrls();
---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CROBF - PokeDex</title>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    </head>
<body>
    <h1>PokeDex</h1>

    <div class="search-container">
        <input type="text" id="pokemon-search" placeholder="Buscar Pokémon por nombre..." autocomplete="off">
    </div>

    <div class="loader" id="loader"></div>

    <div class="pokemon-grid" id="pokemon-list">
        </div>

    <div class="pagination">
        <button id="prev-page" disabled>Anterior</button>
        <span id="page-info">Página 1</span>
        <button id="next-page">Siguiente</button>
    </div>

    <script define:vars={{ initialPokemonData, POKEMON_PER_PAGE }}>
        const pokemonListDiv = document.getElementById('pokemon-list');
        const searchInput = document.getElementById('pokemon-search');
        const prevPageBtn = document.getElementById('prev-page');
        const nextPageBtn = document.getElementById('next-page');
        const pageInfoSpan = document.getElementById('page-info');
        const loader = document.getElementById('loader');

        let currentPage = 1;
        let filteredPokemon = []; 
        let currentPokemonDetails = {}; 

        filteredPokemon = initialPokemonData;

        function showLoader() {
            loader.style.display = 'block';
            pokemonListDiv.style.display = 'none';
        }

        function hideLoader() {
            loader.style.display = 'none';
            pokemonListDiv.style.display = 'grid';
        }

        async function fetchAndRenderPokemon() {
            showLoader();
            pokemonListDiv.innerHTML = ''; 

            const startIndex = (currentPage - 1) * POKEMON_PER_PAGE;
            const endIndex = startIndex + POKEMON_PER_PAGE;
            const pokemonToRender = filteredPokemon.slice(startIndex, endIndex);

            const pokemonPromises = pokemonToRender.map(async (pokemon) => {
                if (currentPokemonDetails[pokemon.name]) {
                    return currentPokemonDetails[pokemon.name]; 
                } else {
                    const response = await fetch(pokemon.url);
                    const details = await response.json();
                    currentPokemonDetails[pokemon.name] = details; 
                    return details;
                }
            });

            const detailedPokemon = await Promise.all(pokemonPromises);

            detailedPokemon.forEach(pokemon => {
                const types = pokemon.types.map(typeInfo => {
                    const typeName = typeInfo.type.name;
                    return `<span class="type-badge type-${typeName}">${typeName.charAt(0).toUpperCase() + typeName.slice(1)}</span>`;
                }).join('');

                const pokemonCardHtml = `
                    <div class="pokemon-card">
                        <img src="${pokemon.sprites.front_default || '/placeholder.png'}" alt="${pokemon.name}" class="pokemon-image">
                        <h3 class="pokemon-name">${pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1)}</h3>
                        <div class="pokemon-types-container">${types}</div>
                    </div>
                `;
                pokemonListDiv.insertAdjacentHTML('beforeend', pokemonCardHtml);
            });

            hideLoader();
            updatePaginationControls();
        }

        function updatePaginationControls() {
            const totalPages = Math.ceil(filteredPokemon.length / POKEMON_PER_PAGE);

            prevPageBtn.disabled = currentPage === 1;
            nextPageBtn.disabled = currentPage === totalPages || filteredPokemon.length === 0;
            pageInfoSpan.textContent = `Página ${currentPage} de ${totalPages || 1}`; 
        }

        searchInput.addEventListener('input', () => {
            const searchTerm = searchInput.value.toLowerCase();
            if (searchTerm === '') {
                filteredPokemon = initialPokemonData; 
            } else {
                filteredPokemon = initialPokemonData.filter(pokemon =>
                    pokemon.name.toLowerCase().includes(searchTerm)
                );
            }
            currentPage = 1;
            fetchAndRenderPokemon();
        });

        // Event listeners para la paginación
        prevPageBtn.addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                fetchAndRenderPokemon();
            }
        });

        nextPageBtn.addEventListener('click', () => {
            const totalPages = Math.ceil(filteredPokemon.length / POKEMON_PER_PAGE);
            if (currentPage < totalPages) {
                currentPage++;
                fetchAndRenderPokemon();
            }
        });

        fetchAndRenderPokemon();
    </script>
</body>
</html>